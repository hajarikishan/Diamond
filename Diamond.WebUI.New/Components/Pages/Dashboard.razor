@page "/"
@rendermode InteractiveServer

@using Diamond.Share.Models.Dashboard
@inject HttpClient Http

<div class="container my-4">
    <h3 class="mb-4 fw-bold d-flex align-items-center">
        <i class="bi bi-speedometer2 me-2"></i> Dashboard
    </h3>

    @if (loading)
    {
        <div class="text-center my-5">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
        </div>
    }
    else if (!string.IsNullOrEmpty(errorMessage))
    {
        <div class="alert alert-danger">@errorMessage</div>
    }
    else if (summary != null)
    {
        <div class="row g-4">
            @Card("Colors", summary.ColorsCount, "bi-palette-fill", "bg-gradient-primary", 5)
            @Card("Shapes", summary.ShapesCount, "bi-circle-fill", "bg-gradient-success", 3)
            @Card("Clarity", summary.ClarityCount, "bi-square-fill", "bg-gradient-warning", -2)
            @Card("Cut", summary.CutCount, "bi-scissors", "bg-gradient-info", 4)
            @Card("Purity", summary.PurityCount, "bi-gem", "bg-gradient-danger", 0)
            @Card("Polish", summary.PolishCount, "bi-stars", "bg-gradient-secondary", 1)
        </div>
    }
</div>

@code {
    private DashboardSummary? summary;
    private bool loading = true;
    private string? errorMessage;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            summary = await Http.GetFromJsonAsync<DashboardSummary>("http://localhost:5218/api/dashboard");
        }
        catch (Exception ex)
        {
            errorMessage = "Unable to load dashboard: " + ex.Message;
        }
        finally
        {
            loading = false;
        }
    }

    RenderFragment Card(string title, int count, string icon, string colorClass, int trendPercent) => builder =>
    {
        int seq = 0;
        builder.OpenElement(seq++, "div");
        builder.AddAttribute(seq++, "class", "col-12 col-sm-6 col-lg-4");

        builder.OpenElement(seq++, "div");
        builder.AddAttribute(seq++, "class", "card dashboard-card shadow-sm h-100");

        builder.OpenElement(seq++, "div");
        builder.AddAttribute(seq++, "class", "card-body d-flex align-items-center");

        // Icon
        builder.OpenElement(seq++, "div");
        builder.AddAttribute(seq++, "class", $"me-3 icon-circle {colorClass}");
        builder.OpenElement(seq++, "i");
        builder.AddAttribute(seq++, "class", $"bi {icon}");
        builder.CloseElement(); // i
        builder.CloseElement(); // icon-circle

        // Text
        builder.OpenElement(seq++, "div");
        builder.AddMarkupContent(seq++, $"<h6 class='card-subtitle text-muted'>{title}</h6>");
        builder.AddMarkupContent(seq++, $"<h3 class='fw-bold mb-1'>{count}</h3>");

        // Trend indicator
        if (trendPercent != 0)
        {
            var trendIcon = trendPercent > 0 ? "bi-arrow-up-short text-success" : "bi-arrow-down-short text-danger";
            var trendText = trendPercent > 0 ? $"↑ {trendPercent}%" : $"↓ {Math.Abs(trendPercent)}%";
            builder.AddMarkupContent(seq++, $"<small class='text-muted me-2'>Updated {summary?.LastUpdated.ToLocalTime():g}</small>");
            builder.AddMarkupContent(seq++, $"<small class='{(trendPercent > 0 ? "text-success" : "text-danger")}'>{trendText}</small>");

        }
        else
        {
            builder.AddMarkupContent(seq++, $"<small class='text-muted'>Updated {summary?.LastUpdated.ToLocalTime():g}</small>");
        }

        builder.CloseElement(); // text div
        builder.CloseElement(); // card-body
        builder.CloseElement(); // card
        builder.CloseElement(); // col
    };
}

<style>
    .dashboard-card {
        border-radius: 0.8rem;
        transition: transform 0.2s ease, box-shadow 0.2s ease;
        min-height: 140px;
    }

        .dashboard-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 16px 32px rgba(0, 0, 0, 0.15);
        }

    .icon-circle {
        width: 60px;
        height: 60px;
        display: flex;
        align-items: center;
        justify-content: center;
        border-radius: 50%;
        color: #fff;
        font-size: 1.5rem;
    }

    .bg-gradient-primary {
        background: linear-gradient(135deg,#5b8def,#2d6cdf);
    }

    .bg-gradient-success {
        background: linear-gradient(135deg,#2ec5a8,#12a070);
    }

    .bg-gradient-warning {
        background: linear-gradient(135deg,#ffb86b,#ff8a00);
    }

    .bg-gradient-info {
        background: linear-gradient(135deg,#6fd3ff,#2fa6e0);
    }

    .bg-gradient-danger {
        background: linear-gradient(135deg,#ff7b9c,#ff3d6e);
    }

    .bg-gradient-secondary {
        background: linear-gradient(135deg,#a9a9ff,#6f6fff);
    }
</style>

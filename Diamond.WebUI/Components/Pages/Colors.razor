@page "/colors"
@rendermode InteractiveServer

@using Diamond.Share.Models
@inject HttpClient Http
@inject IJSRuntime JS

<h3 class="mb-4">Colors</h3>

<div class="row">
    <!-- Left side: Table -->
    <div class="col-md-8">
        <div class="card shadow-sm mb-4">
            <div class="card-header bg-primary text-white">
                <strong>Colors List</strong>
            </div>
            <div class="card-body">
                <!-- Search -->
                <div class="input-group mb-3" style="max-width: 450px;">
                    <input type="text" class="form-control" placeholder="Search colors by name..."
                           @bind="searchTerm" />
                    <button class="btn btn-primary" type="button" @onclick="ApplyFilters">
                        <i class="bi bi-search"></i> Search
                    </button>
                    <button class="btn btn-secondary ms-2" type="button" @onclick="ResetSearch">
                        <i class="bi bi-x-Circle">Reset</i>
                    </button>
                </div>

                <!-- Table with Scroll -->
                <div class="table-responsive" style="max-height: 400px; overflow-y: auto;">
                    <table class="table table-striped table-hover">
                        <thead class="table-dark">
                            <tr>
                                <th>ID</th>
                                <th>Name</th>
                                <th>Description</th>
                                <th style="width:150px;">Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            @if (pagedColors.Any())
                            {
                                @foreach (var c in pagedColors)
                                {
                                    <tr>
                                        <td>@c.ColorId</td>
                                        <td>@c.ColorName</td>
                                        <td>@c.Description</td>
                                        <td>
                                            <button class="btn btn-sm btn-warning me-1" @onclick="() => EditColor(c)">Edit</button>
                                            <button class="btn btn-sm btn-danger" @onclick="() => ConfirmDelete(c.ColorId)">Delete</button>
                                        </td>
                                    </tr>
                                }
                            }
                            else
                            {
                                <tr>
                                    <td colspan="4" class="text-center text-muted">No records found</td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>

            <!-- Pagination Footer -->
            <div class="card-footer d-flex justify-content-between align-items-center">
                <div>
                    <label class="me-2">Rows per page:</label>
                    <select class="form-select form-select-sm d-inline w-auto" @bind="pageSize">
                        <option value="5">5</option>
                        <option value="10">10</option>
                        <option value="20">20</option>
                    </select>
                </div>

                <div>
                    <button class="btn btn-outline-secondary btn-sm me-2" @onclick="PrevPage" disabled="@(!CanPrev)">Prev</button>
                    <span>Page @currentPage of @totalPages</span>
                    <button class="btn btn-outline-secondary btn-sm ms-2" @onclick="NextPage" disabled="@(!CanNext)">Next</button>
                </div>
            </div>
        </div>
    </div>

    <!-- Right side: Add/Edit Form -->
    <div class="col-md-4">
        <div class="card shadow-sm">
            <div class="card-header bg-success text-white">
                <strong>@(newColor.ColorId == 0 ? "Add New Color" : "Edit Color")</strong>
            </div>
            <div class="card-body">
                <EditForm Model="newColor" OnValidSubmit="HandleValidSubmit">
                    <DataAnnotationsValidator />
                    <ValidationSummary />

                    <div class="mb-3">
                        <label class="form-label">Name <span class="text-danger">*</span></label>
                        <InputText @bind-Value="newColor.ColorName" class="form-control py-2" />
                        <ValidationMessage For="@(() => newColor.ColorName)" />
                    </div>

                    <div class="mb-3">
                        <label class="form-label">Description</label>
                        <InputText @bind-Value="newColor.Description" class="form-control py-2" />
                    </div>

                    <button type="submit" class="btn btn-success me-2 px-3 py-2">Save</button>
                    <button type="button" class="btn btn-secondary px-3 py-2" @onclick="Cancel">
                        @(newColor.ColorId == 0 ? "Cancel" : "Back")
                    </button>
                </EditForm>
            </div>
        </div>
    </div>
</div>

@code {

    private readonly string baseUrl = "http://localhost:5218/api/colors";

    private List<MD_COLOR>? colors;
    private List<MD_COLOR> pagedColors = new();
    private MD_COLOR newColor = new() { Description = "" };
    private string searchTerm = "";

    // Pagination
    private int currentPage = 1;
    private int pageSize = 5;
    private int totalPages = 1;

    protected override async Task OnInitializedAsync()
    {
        await LoadColors();
    }

    private async Task LoadColors()
    {
        colors = await Http.GetFromJsonAsync<List<MD_COLOR>>(baseUrl);
        ApplyFilters();
    }

    private void ApplyFilters()
    {
        if (colors == null) return;

        var filtered = colors
            .Where(c => string.IsNullOrEmpty(searchTerm) ||
                        c.ColorName.Contains(searchTerm, StringComparison.OrdinalIgnoreCase))
            .ToList();

        totalPages = (int)Math.Ceiling(filtered.Count / (double)pageSize);
        if (currentPage > totalPages) currentPage = totalPages == 0 ? 1 : totalPages;

        pagedColors = filtered.Skip((currentPage - 1) * pageSize).Take(pageSize).ToList();
    }

    public void ResetSearch()
    {
        searchTerm = "";
        ApplyFilters();
    }

    private void PrevPage()
    {
        if (CanPrev) { currentPage--; ApplyFilters(); }
    }

    private void NextPage()
    {
        if (CanNext) { currentPage++; ApplyFilters(); }
    }

    private bool CanPrev => currentPage > 1;
    private bool CanNext => currentPage < totalPages;

    private async Task HandleValidSubmit()
    {
        await SaveColor();
    }

    private async Task SaveColor()
    {
        HttpResponseMessage response;

        if (string.IsNullOrWhiteSpace(newColor.ColorName))
            return;

        if (newColor.ColorId == 0)
            response = await Http.PostAsJsonAsync(baseUrl, newColor);
        else
            response = await Http.PutAsJsonAsync($"{baseUrl}/{newColor.ColorId}", newColor);

        if (response.IsSuccessStatusCode)
        {
            await LoadColors();
            newColor = new MD_COLOR() { Description = "" };
        }
    }

    private void EditColor(MD_COLOR color)
    {
        newColor = new MD_COLOR
        {
            ColorId = color.ColorId,
            ColorName = color.ColorName,
            Description = color.Description ?? ""
        };
    }

    private async Task ConfirmDelete(int id)
    {
        var confirmed = await JS.InvokeAsync<bool>("confirm", "Are you sure you want to delete this color?");
        if (confirmed) await DeleteColor(id);
    }

    private async Task DeleteColor(int id)
    {
        var response = await Http.DeleteAsync($"{baseUrl}/{id}");
        if (response.IsSuccessStatusCode)
        {
            await LoadColors();
        }
    }

    private void Cancel()
    {
        newColor = new ();
    }
}

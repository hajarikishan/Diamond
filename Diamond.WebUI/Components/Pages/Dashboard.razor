@page "/"

@attribute [Authorize]

@rendermode InteractiveServer

@using Diamond.Share.Models
@using Microsoft.AspNetCore.Authorization
@inject HttpClient Http

@* <RedirectToLogin> *@

<h3 class="mb-4 fw-bold">Dashboard</h3>

@if (loading)
{
    <div class="spinner-border" role="status">
        <span class="visually-hidden">Loading...</span>
    </div>
}
else if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-danger">@errorMessage</div>
}
else if (summary != null)
{
    <div class="row g-4">
        <!-- Colors -->
        <div class="col-12 col-sm-6 col-lg-4">
            <div class="card dashboard-card h-100">
                <div class="card-body d-flex align-items-center">
                    <div class="me-3 icon-circle bg-gradient-primary">
                        <i class="bi bi-palette-fill fs-4"></i>
                    </div>
                    <div>
                        <div class="card-subtitle small text-muted">Colors</div>
                        <div class="h4 fw-bold mb-0">@summary.ColorsCount</div>
                        <div class="small text-muted">Updated @summary.LastUpdated.ToLocalTime().ToString("g")</div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Shapes -->
        <div class="col-12 col-sm-6 col-lg-4">
            <div class="card dashboard-card h-100">
                <div class="card-body d-flex align-items-center">
                    <div class="me-3 icon-circle bg-gradient-success">
                        <i class="bi bi-shapes fs-4"></i>
                    </div>
                    <div>
                        <div class="card-subtitle small text-muted">Shapes</div>
                        <div class="h4 fw-bold mb-0">@summary.ShapesCount</div>
                        <div class="small text-muted">Updated @summary.LastUpdated.ToLocalTime().ToString("g")</div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Clarity -->
        <div class="col-12 col-sm-6 col-lg-4">
            <div class="card dashboard-card h-100">
                <div class="card-body d-flex align-items-center">
                    <div class="me-3 icon-circle bg-gradient-warning">
                        <i class="bi bi-brightness-high fs-4"></i>
                    </div>
                    <div>
                        <div class="card-subtitle small text-muted">Clarity</div>
                        <div class="h4 fw-bold mb-0">@summary.ClarityCount</div>
                        <div class="small text-muted">Updated @summary.LastUpdated.ToLocalTime().ToString("g")</div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Cut -->
        <div class="col-12 col-sm-6 col-lg-4">
            <div class="card dashboard-card h-100">
                <div class="card-body d-flex align-items-center">
                    <div class="me-3 icon-circle bg-gradient-info">
                        <i class="bi bi-scissors fs-4"></i>
                    </div>
                    <div>
                        <div class="card-subtitle small text-muted">Cut</div>
                        <div class="h4 fw-bold mb-0">@summary.CutCount</div>
                        <div class="small text-muted">Updated @summary.LastUpdated.ToLocalTime().ToString("g")</div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Purity -->
        <div class="col-12 col-sm-6 col-lg-4">
            <div class="card dashboard-card h-100">
                <div class="card-body d-flex align-items-center">
                    <div class="me-3 icon-circle bg-gradient-danger">
                        <i class="bi bi-droplet-fill fs-4"></i>
                    </div>
                    <div>
                        <div class="card-subtitle small text-muted">Purity</div>
                        <div class="h4 fw-bold mb-0">@summary.PurityCount</div>
                        <div class="small text-muted">Updated @summary.LastUpdated.ToLocalTime().ToString("g")</div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Polish -->
        <div class="col-12 col-sm-6 col-lg-4">
            <div class="card dashboard-card h-100">
                <div class="card-body d-flex align-items-center">
                    <div class="me-3 icon-circle bg-gradient-secondary">
                        <i class="bi bi-circle-half fs-4"></i>
                    </div>
                    <div>
                        <div class="card-subtitle small text-muted">Polish</div>
                        <div class="h4 fw-bold mb-0">@summary.PolishCount</div>
                        <div class="small text-muted">Updated @summary.LastUpdated.ToLocalTime().ToString("g")</div>
                    </div>
                </div>
            </div>
        </div>
    </div>
}

@code {
    private readonly string baseUrl = "http://localhost:5218/api/dashboard";

    private DashboardSummary summary;
    private bool loading = true;
    private string errorMessage;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            summary = await Http.GetFromJsonAsync<DashboardSummary>(baseUrl);
        }
        catch (Exception ex)
        {
            errorMessage = "Unable to load dashboard: " + ex.Message;
        }
        finally
        {
            loading = false;
        }
    }
}
@* </RedirectToLogin> *@

<style>
    .dashboard-card {
        border-radius: 0.8rem;
        box-shadow: 0 4px 12px rgba(18, 38, 63, 0.1);
        transition: transform .15s ease, box-shadow .15s ease;
        border: 0;
    }

        .dashboard-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 12px 24px rgba(18, 38, 63, 0.15);
        }

    .icon-circle {
        width: 56px;
        height: 56px;
        display: inline-flex;
        align-items: center;
        justify-content: center;
        border-radius: 50%;
        color: #fff;
        flex-shrink: 0;
    }

    .bg-gradient-primary {
        background: linear-gradient(135deg,#5b8def,#2d6cdf);
    }

    .bg-gradient-success {
        background: linear-gradient(135deg,#2ec5a8,#12a070);
    }

    .bg-gradient-warning {
        background: linear-gradient(135deg,#ffb86b,#ff8a00);
    }

    .bg-gradient-info {
        background: linear-gradient(135deg,#6fd3ff,#2fa6e0);
    }

    .bg-gradient-danger {
        background: linear-gradient(135deg,#ff7b9c,#ff3d6e);
    }

    .bg-gradient-secondary {
        background: linear-gradient(135deg,#a9a9ff,#6f6fff);
    }

    .card-subtitle {
        font-weight: 600;
        color: #6c757d;
    }
</style>




@* @page "/"
@rendermode InteractiveServer

@using Diamond.Share.Models
@inject HttpClient Http

<head>
    <!-- Add this to ensure Tailwind CSS works -->
    <script src="https://cdn.tailwindcss.com"></script>
    <script>
        tailwind.config = {
            theme: {
                extend: {
                    fontFamily: {
                        sans: ['Inter', 'sans-serif'],
                    },
                    colors: {
                        'primary-light': '#8B5CF6',
                        'primary-dark': '#5B21B1',
                        'success-light': '#34D399',
                        'success-dark': '#065F46',
                        'warning-light': '#FCD34D',
                        'warning-dark': '#B45309',
                        'info-light': '#67E8F9',
                        'info-dark': '#0E7490',
                        'danger-light': '#F87171',
                        'danger-dark': '#991B1B',
                        'secondary-light': '#CBD5E1',
                        'secondary-dark': '#4B5563',
                    },
                }
            }
        }
    </script>
    <!-- Optional: For a more modern font -->
    <link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Inter:wght@400;700;800&display=swap" />
    <!-- Optional: For the icons. Since we are using embedded SVGs, this is not strictly needed. -->
    <script src="https://unpkg.com/lucide@latest"></script>
</head>

<style>
    /* Custom CSS for a dark, modern look */
    body {
        background-color: #0F172A; /* Slate 950 */
        font-family: 'Inter', sans-serif;
    }

    .dashboard-card {
        background: #1E293B; /* Slate 800 */
        border-radius: 0.75rem;
        box-shadow: 0 6px 10px rgba(0, 0, 0, 0.2), 0 2px 5px rgba(0, 0, 0, 0.15);
        transition: transform 0.2s ease-in-out, box-shadow 0.2s ease-in-out;
    }

        .dashboard-card:hover {
            transform: translateY(-8px);
            box-shadow: 0 15px 25px rgba(0, 0, 0, 0.3), 0 6px 10px rgba(0, 0, 0, 0.2);
        }

    .icon-circle {
        width: 64px;
        height: 64px;
        min-width: 64px;
        border-radius: 9999px;
        display: flex;
        align-items: center;
        justify-content: center;
        color: white;
    }

    /* Custom gradient classes */
    .bg-gradient-primary {
        background-image: linear-gradient(to right, #8B5CF6, #5B21B1); /* Purple */
    }

    .bg-gradient-success {
        background-image: linear-gradient(to right, #34D399, #065F46); /* Emerald */
    }

    .bg-gradient-warning {
        background-image: linear-gradient(to right, #FCD34D, #B45309); /* Amber */
    }

    .bg-gradient-info {
        background-image: linear-gradient(to right, #67E8F9, #0E7490); /* Cyan */
    }

    .bg-gradient-danger {
        background-image: linear-gradient(to right, #F87171, #991B1B); /* Red */
    }

    .bg-gradient-secondary {
        background-image: linear-gradient(to right, #94A3B8, #4B5563); /* Slate */
    }
</style>

<!-- Main container with responsive padding and dark background -->
<div class="p-6 md:p-10 text-white">
    <h3 class="text-3xl md:text-4xl font-extrabold mb-8 text-white">Dashboard</h3>

    @if (loading)
    {
        <div class="flex justify-center items-center py-20">
            <div class="animate-spin rounded-full h-12 w-12 border-4 border-white border-t-transparent"></div>
        </div>
    }
    else if (!string.IsNullOrEmpty(errorMessage))
    {
        <div class="bg-red-600 text-white p-4 rounded-lg shadow-md">@errorMessage</div>
    }
    else if (summary != null)
    {
        <!-- Dashboard Cards Section -->
        <div class="grid gap-6 md:grid-cols-2 lg:grid-cols-3">
            <!-- Card: Colors -->
            <div class="dashboard-card p-6 flex items-center space-x-6">
                <div class="icon-circle bg-gradient-primary">
                    <svg xmlns="http://www.w3.org/2000/svg" width="40" height="40" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-gem"><path d="M6 3h12l3 6-9 12-9-12 3-6z" /><path d="M12 3l9 6-9 12-9-12z" /><path d="M6 3l3 6M12 3l-3 6m0 0l3 6M12 3l-3 6M15 9l-3 6M15 9l-3 6" /></svg>
                </div>
                <div class="flex-grow">
                    <div class="text-lg uppercase tracking-wider text-gray-400 font-bold">Colors</div>
                    <div class="text-5xl font-extrabold mt-1 text-white">@summary.ColorsCount</div>
                    <div class="text-sm text-gray-500 mt-1">Updated @summary.LastUpdated.ToLocalTime().ToString("g")</div>
                </div>
            </div>

            <!-- Card: Shapes -->
            <div class="dashboard-card p-6 flex items-center space-x-6">
                <div class="icon-circle bg-gradient-success">
                    <svg xmlns="http://www.w3.org/2000/svg" width="40" height="40" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-shapes"><path d="m2 9 4 2 4-2" /><path d="M10 11 14 9l4 2" /><path d="M14 9l4-2 4 2" /><path d="m14 9-4 2-4-2" /><path d="m10 11 4 2 4-2" /><path d="M10 11l-4 2-4-2" /><path d="M2 9v6l4 2 4-2V9" /><path d="M10 11v6l4 2 4-2V11" /><path d="M14 9v6l4 2 4-2V9" /><path d="M12 2v6" /><path d="M12 16v6" /></svg>
                </div>
                <div class="flex-grow">
                    <div class="text-lg uppercase tracking-wider text-gray-400 font-bold">Shapes</div>
                    <div class="text-5xl font-extrabold mt-1 text-white">@summary.ShapesCount</div>
                    <div class="text-sm text-gray-500 mt-1">Updated @summary.LastUpdated.ToLocalTime().ToString("g")</div>
                </div>
            </div>

            <!-- Card: Clarity -->
            <div class="dashboard-card p-6 flex items-center space-x-6">
                <div class="icon-circle bg-gradient-warning">
                    <svg xmlns="http://www.w3.org/2000/svg" width="40" height="40" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-eye"><path d="M2 12s3-7 10-7 10 7 10 7-3 7-10 7-10-7-10-7Z" /><circle cx="12" cy="12" r="3" /></svg>
                </div>
                <div class="flex-grow">
                    <div class="text-lg uppercase tracking-wider text-gray-400 font-bold">Clarity</div>
                    <div class="text-5xl font-extrabold mt-1 text-white">@summary.ClarityCount</div>
                    <div class="text-sm text-gray-500 mt-1">Updated @summary.LastUpdated.ToLocalTime().ToString("g")</div>
                </div>
            </div>

            <!-- Card: Cut -->
            <div class="dashboard-card p-6 flex items-center space-x-6">
                <div class="icon-circle bg-gradient-info">
                    <svg xmlns="http://www.w3.org/2000/svg" width="40" height="40" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-cut"><path d="M4.6 20.4 2 22l-2-2 2.6-2.6-2.6-2.6 2-2 2.6 2.6 2.6-2.6 2 2-2.6 2.6 2.6 2.6-2 2-2.6-2.6L2 22z" /><path d="M12 10l-4-4" /><path d="M20 4l-8 8" /><path d="m14 12 8 8" /></svg>
                </div>
                <div class="flex-grow">
                    <div class="text-lg uppercase tracking-wider text-gray-400 font-bold">Cut</div>
                    <div class="text-5xl font-extrabold mt-1 text-white">@summary.CutCount</div>
                    <div class="text-sm text-gray-500 mt-1">Updated @summary.LastUpdated.ToLocalTime().ToString("g")</div>
                </div>
            </div>

            <!-- Card: Purity -->
            <div class="dashboard-card p-6 flex items-center space-x-6">
                <div class="icon-circle bg-gradient-danger">
                    <svg xmlns="http://www.w3.org/2000/svg" width="40" height="40" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-sparkles"><path d="M12 2v2" /><path d="M12 20v2" /><path d="M2 12h2" /><path d="M20 12h2" /><path d="M14.5 4.5l-2.8 2.8" /><path d="M18.8 18.8l-2.8-2.8" /><path d="M4.5 14.5l2.8 2.8" /><path d="M18.8 4.5l-2.8 2.8" /></svg>
                </div>
                <div class="flex-grow">
                    <div class="text-lg uppercase tracking-wider text-gray-400 font-bold">Purity</div>
                    <div class="text-5xl font-extrabold mt-1 text-white">@summary.PurityCount</div>
                    <div class="text-sm text-gray-500 mt-1">Updated @summary.LastUpdated.ToLocalTime().ToString("g")</div>
                </div>
            </div>

            <!-- Card: Polish -->
            <div class="dashboard-card p-6 flex items-center space-x-6">
                <div class="icon-circle bg-gradient-secondary">
                    <svg xmlns="http://www.w3.org/2000/svg" width="40" height="40" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-disc"><circle cx="12" cy="12" r="10" /><circle cx="12" cy="12" r="3" /></svg>
                </div>
                <div class="flex-grow">
                    <div class="text-lg uppercase tracking-wider text-gray-400 font-bold">Polish</div>
                    <div class="text-5xl font-extrabold mt-1 text-white">@summary.PolishCount</div>
                    <div class="text-sm text-gray-500 mt-1">Updated @summary.LastUpdated.ToLocalTime().ToString("g")</div>
                </div>
            </div>
        </div>
    }
</div>


@code {
    private readonly string baseUrl = "http://localhost:5218/api/dashboard";

    private DashboardSummary? summary;
    private bool loading = true;
    private string? errorMessage;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            summary = await Http.GetFromJsonAsync<DashboardSummary>(baseUrl);
        }
        catch (Exception ex)
        {
            errorMessage = "Unable to load dashboard: " + ex.Message;
        }
        finally
        { 
            loading = false;
        }
    }
} *@



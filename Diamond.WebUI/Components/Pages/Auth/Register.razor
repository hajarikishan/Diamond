@page "/register"

@rendermode InteractiveServer

@using Diamond.Share.Models.Auth
@using Diamond.WebUI.Services
@using Microsoft.AspNetCore.Components.Authorization
@inject AuthService AuthService
@inject NavigationManager Nav
@inject IJSRuntime JS
@inject AuthenticationStateProvider AuthStateProvider

<h3 class="mb-3">Register</h3>

@if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-danger">@errorMessage</div>
}

<EditForm Model="registerModel" OnValidSubmit="HandleRegister">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="mb-3">
        <label>Username</label>
        <InputText @bind-Value="registerModel.Username" class="form-control" />
    </div>

    <div class="mb-3">
        <label>Email</label>
        <InputText @bind-Value="registerModel.Email" class="form-control" />
    </div>

    <div class="mb-3">
        <label>Password</label>
        <InputText @bind-Value="registerModel.Password" type="password" class="form-control" />
    </div>

    <button type="submit" class="btn btn-success">Register</button>
</EditForm>

@code {
    private RegisterRequest registerModel = new();
    private string errorMessage;

    private async Task HandleRegister()
    {
        try
        {
            var result = await AuthService.Register(registerModel);

            // Save token
            await JS.InvokeVoidAsync("localStorage.setItem", "authToken", result.Token);
            ((CustomAuthStateProvider)AuthStateProvider).NotifyUserAuthentication(result.Token);

            // Redirect to login or dashboard
            Nav.NavigateTo("/");
        }
        catch (Exception ex)
        {
            errorMessage = "Registration failed: " + ex.Message;
        }
    }
}

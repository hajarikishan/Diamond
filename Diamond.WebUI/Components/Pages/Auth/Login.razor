@page "/login"

@rendermode InteractiveServer

@using Diamond.Share.Models.Auth
@using Diamond.WebUI.Services
@using Microsoft.AspNetCore.Components.Authorization
@inject AuthService AuthService
@inject NavigationManager Nav
@inject IJSRuntime JS
@inject AuthenticationStateProvider AuthStateProvider

<h3 class="mb-3">Login</h3>

@if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-danger">@errorMessage</div>
}

<EditForm Model="loginModel" OnValidSubmit="HandleLogin">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="mb-3">
        <label>Email</label>
        <InputText @bind-Value="loginModel.Email" class="form-control" />
    </div>

    <div class="mb-3">
        <label>Password</label>
        <InputText @bind-Value="loginModel.Password" type="password" class="form-control" />
    </div>

    <button type="submit" class="btn btn-primary">Login</button>
</EditForm>

@code {
    private LoginRequest loginModel = new();
    private string errorMessage;

    private async Task HandleLogin()
    {
        try
        {
            var result = await AuthService.Login(loginModel);

            // Save token in browser localStorage
            await JS.InvokeVoidAsync("localStorage.setItem", "authToken", result.Token);
            ((CustomAuthStateProvider)AuthStateProvider).NotifyUserAuthentication(result.Token);

            // Redirect to dashboard
            Nav.NavigateTo("/");
        }
        catch (Exception ex)
        {
            errorMessage = "Login failed: " + ex.Message;
        }
    }
}

@page "/cut"
@rendermode InteractiveServer
@using Diamond.Share.Models
@inject HttpClient Http
@inject IJSRuntime JS

<h3>Cut</h3>

<div class="row">
    <div class="col-md-8">
        <div class="card shadow-sm mb-4">
            <div class="card-header bg-primary text-white"><strong>Cut List</strong></div>
            <div class="card-body">
                <div class="input-group mb-3" style="max-width:450px;">
                    <input class="form-control" placeholder="Search cut by name..." @bind="searchTerm" />
                    <button class="btn btn-primary" @onclick="ApplyFilters">Search</button>
                    <button class="btn btn-secondary ms-2" @onclick="ResetSearch">Reset</button>
                </div>

                <div class="table-responsive" style="max-height:400px; overflow-y:auto;">
                    <table class="table table-striped table-hover">
                        <thead class="table-dark">
                            <tr><th>ID</th><th>Name</th><th>Grade</th><th>Description</th><th>Score</th><th>Actions</th></tr>
                        </thead>
                        <tbody>
                            @if (pagedItems.Any())
                            {
                                @foreach (var item in pagedItems)
                                {
                                    <tr>
                                        <td>@item.CutId</td>
                                        <td>@item.CutName</td>
                                        <td>@item.Grade</td>
                                        <td>@item.Description</td>
                                        <td>@item.Score</td>
                                        <td>
                                            <button class="btn btn-sm btn-warning me-1" @onclick="() => Edit(item)">Edit</button>
                                            <button class="btn btn-sm btn-danger" @onclick="() => ConfirmDelete(item.CutId)">Delete</button>
                                        </td>
                                    </tr>
                                }
                            }
                            else
                            {
                                <tr><td colspan="6">No records found</td></tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>

            <div class="card-footer d-flex justify-content-between">
                <div>
                    <label>Rows per page</label>
                    <select class="form-select form-select-sm d-inline w-auto" @bind="pageSize">
                        <option value="5">5</option>
                        <option value="10">10</option>
                        <option value="20">20</option>
                    </select>
                </div>
                <div>
                    <button class="btn btn-outline-secondary btn-sm me-2" @onclick="PrevPage" disabled="@(!CanPrev)">Prev</button>
                    Page @currentPage of @totalPages
                    <button class="btn btn-outline-secondary btn-sm ms-2" @onclick="NextPage" disabled="@(!CanNext)">Next</button>
                </div>
            </div>
        </div>
    </div>

    <div class="col-md-4">
        <div class="card shadow-sm">
            <div class="card-header bg-success text-white"><strong>@(model.CutId == 0 ? "Add New" : "Edit")</strong></div>
            <div class="card-body">
                <EditForm Model="model" OnValidSubmit="HandleSubmit">
                    <DataAnnotationsValidator />
                    <ValidationSummary />
                    <div class="mb-2">
                        <label>Name *</label>
                        <InputText @bind-Value="model.CutName" class="form-control" />
                        <ValidationMessage For="@(() => model.CutName)" />
                    </div>
                    <div class="mb-2">
                        <label>Grade</label>
                        <InputText @bind-Value="model.Grade" class="form-control" />
                    </div>
                    <div class="mb-2">
                        <label>Description</label>
                        <InputText @bind-Value="model.Description" class="form-control" />
                    </div>
                    <div class="mb-2">
                        <label>Score</label>
                        <InputNumber @bind-Value="model.Score" class="form-control" />
                    </div>

                    <button type="button" class="btn btn-success me-2" @onclick="Save">Save</button>
                    <button type="button" class="btn btn-secondary" @onclick="Cancel">Cancel</button>
                </EditForm>
            </div>
        </div>
    </div>
</div>

@code {

    private readonly string baseUrl = "http://localhost:5218/api/cut";
    private List<MD_CUT>? items;
    private List<MD_CUT> pagedItems = new();
    private MD_CUT model = new();
    private string searchTerm = "";
    private int currentPage = 1, pageSize = 5, totalPages = 1;

    protected override async Task OnInitializedAsync() { await Load(); }

    private async Task Load()
    {
        items = await Http.GetFromJsonAsync<List<MD_CUT>>(baseUrl);
        ApplyFilters();
    }
    private void ApplyFilters()
    {
        if (items == null) return;
        var filtered = items.Where(x => string.IsNullOrEmpty(searchTerm) || x.CutName.Contains(searchTerm, StringComparison.OrdinalIgnoreCase)).ToList();
        totalPages = (int)Math.Ceiling(filtered.Count / (double)pageSize);

        if (currentPage > totalPages) currentPage = totalPages == 0 ? 1 : totalPages;
        pagedItems = filtered.Skip((currentPage - 1) * pageSize).Take(pageSize).ToList();
    }

    private void ResetSearch() { searchTerm = ""; ApplyFilters(); }
    private void PrevPage() { if (currentPage > 1) { currentPage--; ApplyFilters(); } }
    private void NextPage() { if (currentPage < totalPages) { currentPage++; ApplyFilters(); } }

    private bool CanPrev => currentPage > 1;
    private bool CanNext => currentPage < totalPages;

    private async Task HandleSubmit() { await Save(); }
    private async Task Save()

    {
        HttpResponseMessage resp;
        if (model.CutId == 0) resp = await Http.PostAsJsonAsync(baseUrl, model);
        else resp = await Http.PutAsJsonAsync($"{baseUrl}/{model.CutId}", model);
        if (resp.IsSuccessStatusCode) { await Load(); model = new MD_CUT(); }
    }

    private void Edit(MD_CUT m) { model = new MD_CUT { CutId = m.CutId, CutName = m.CutName, Grade = m.Grade, Description = m.Description, Score = m.Score }; }


    private async Task ConfirmDelete(int id) { if (await JS.InvokeAsync<bool>("confirm", "Delete?")) { var r = await Http.DeleteAsync($"{baseUrl}/{id}"); if (r.IsSuccessStatusCode) await Load(); } }


    private void Cancel() { model = new MD_CUT(); }
}
